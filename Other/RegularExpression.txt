因为正则表达式也是用字符串表示的，所以，我们要首先了解如何用字符来描述字符。

1.在正则表达式中，如果直接给出字符，就是精确匹配。用\d可以匹配一个数字，\w可以匹配一个字母或数字。
'00\d'可以匹配'007'，但无法匹配'00A'；
'\d\d\d'可以匹配'010'；
'\w\w\d'可以匹配'py3'；
2. .可以匹配任意字符。
'py.'可以匹配'pyc'、'pyo'、'py!'等等。
3.要匹配变长的字符，在正则表达式中，用*表示任意个字符（包括0个），用+表示至少一个字符，用?表示0个或1个字符。
用{n}表示n个字符，用{n,m}表示n-m个字符。
\d{3}\s+\d{3,8}：
（1）\d{3}表示匹配3个数字，例如'010'；
（2）\s可以匹配一个空格（也包括Tab等空白符），所以\s+表示至少有一个空格，例如匹配' '，' '等；
（3）\d{3,8}表示3-8个数字，例如'1234567'。
4.要做更精确地匹配，可以用[]表示范围，比如：
（1）[0-9a-zA-Z\_]可以匹配一个数字、字母或者下划线。
（2）[0-9a-zA-Z\_]+可以匹配至少由一个数字、字母或者下划线组成的字符串，比如'a100'，'0_Z'，'Py3000'等等；
（3）[a-zA-Z\_][0-9a-zA-Z\_]*可以匹配由字母或下划线开头，后接任意个由一个数字、字母或者下划线组成的字符串，也就是Python合法的变量；
（4）[a-zA-Z\_][0-9a-zA-Z\_]{0, 19}更精确地限制了变量的长度是1-20个字符（前面1个字符+后面最多19个字符）。
5.A|B可以匹配A或B，所以(P|p)ython可以匹配'Python'或者'python'。
6.^表示行的开头，^\d表示必须以数字开头。
7.$表示行的结束，\d$表示必须以数字结束。
8.py也可以匹配'python'，但是加上^py$就变成了整行匹配，就只能匹配'py'了。

Python提供re模块，包含所有正则表达式的功能。
1.由于Python的字符串本身也用\转义，所以要特别注意:
s = 'ABC\\-001'，对应的正则表达式变成：'ABC\-001'。因此强烈建议使用Python的r前缀，就不用考虑转义的问题了。
2.match()方法判断是否匹配，如果匹配成功，返回一个Match对象，否则返回None。
示例：
test = '用户输入的字符串'
if re.match(r'正则表达式', test):
    print('ok')
else:
    print('failed')
3.切分字符串。
>>> re.split(r'\s+', 'a b   c')
['a', 'b', 'c']
>>> re.split(r'[\s\,]+', 'a,b, c  d')
['a', 'b', 'c', 'd']
>>> re.split(r'[\s\,\;]+', 'a,b;; c  d')
['a', 'b', 'c', 'd']

4.分组。除了简单地判断是否匹配之外，正则表达式还有提取子串的强大功能。用()表示的就是要提取的分组（Group）。
>>> m = re.match(r'^(\d{3})-(\d{3,8})$', '010-12345')
>>> m
<_sre.SRE_Match object; span=(0, 9), match='010-12345'>
>>> m.group(0)
'010-12345'
>>> m.group(1)
'010'
>>> m.group(2)
'12345'
group(0)永远是原始字符串，group(1)、group(2)……表示第1、2、……个子串。

原则：贪婪匹配。
正则匹配默认是贪婪匹配，也就是匹配尽可能多的字符。举例如下，匹配出数字后面的0：
>>> re.match(r'^(\d+)(0*)$', '102300').groups()
('102300', '')
由于\d+采用贪婪匹配，直接把后面的0全部匹配了，结果0*只能匹配空字符串了。
必须让\d+采用非贪婪匹配（也就是尽可能少匹配），才能把后面的0匹配出来，加个?就可以让\d+采用非贪婪匹配：
>>> re.match(r'^(\d+?)(0*)$', '102300').groups()
('1023', '00')


另外：如果一个正则表达式要重复使用几千次，出于效率的考虑，我们可以预编译该正则表达式，接下来重复使用时就不需要编译这个步骤了，直接匹配。
>>> import re
# 编译:
>>> re_telephone = re.compile(r'^(\d{3})-(\d{3,8})$')
# 使用：
>>> re_telephone.match('010-12345').groups()
('010', '12345')
>>> re_telephone.match('010-8086').groups()
('010', '8086')





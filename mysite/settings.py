"""
Django settings for mysite project.

Generated by 'django-admin startproject' using Django 1.11.2.

For more information on this file, see
https://docs.djangoproject.com/en/1.11/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.11/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/1.11/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '_xh7x+nn_*e89!*r&4*+3yk994(j$vq3@=m+mhpr&k!5!jm@_)'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []

# Application definition，
# INSTALLED_APPS ，它包含在该Django实例中激活的所有Django应用程序的名称。
# 应用程序可以在多个项目中使用，您可以打包和分发，以供他人在项目中使用。

INSTALLED_APPS = [
    'polls.apps.PollsConfig',  # 这样就引用了polls这个应用程序
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'mysite.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        # DIRS是加载Django模板时要检查的文件系统目录的列表;这是一个搜索路径，我们在该目录下可以搜索到自定义的目录并且使用。
        # 就像静态文件一样，我们可以将所有的模板放在一个大的模板目录中。
        # 但是，属于特定应用程序的模板应放置在该应用程序的模板目录（例如polls/templates）而不是项目的（templates）中。

        # 因为这是项目的设置文件，所以，在这里，我们可以自定义项目的模版。步骤如下：
        # 1.在项目下创建templates（与manage.py同级），并在该目录下创建admin目录。
        # 2.把需要覆盖（或者说自定义）的默认模版，复制到admin目录下。例如base_site.html。（默认模版在Django的源文件目录下）
        # 3.对该模版进行修改。

        # 如果DIRS默认为空，Django如何找到默认的管理模板？
        # 答案是，由于APP_DIRS设置为True，Django会自动在每个应用程序包中查找templates/admin子目录，以作为后备，查找到了就使用。
        # 这样设计的好处是，我们可以自定义程序的模版，当这个程序被引用到其他的项目中时，会找到自己所需要的模版，而不需要在项目中更改。
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'mysite.wsgi.application'

# Database，数据库设置，Django默认使用sqlite3，可自行更改，查看下面的参考文档DATABASES。
# https://docs.djangoproject.com/en/1.11/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/1.11/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.11/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.11/howto/static-files/

STATIC_URL = '/static/'
